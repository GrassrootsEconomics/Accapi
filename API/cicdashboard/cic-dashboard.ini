[uwsgi]
http-socket = :8080
chdir = /code/
module = cicdashboard.wsgi
threads = 4
uid = 1000
gid = 2000

# basic setup
master = true
strict = true
enable-threads = true
vacuum=true
single-interpreter = true
die-on-term = true
need-app = true
disable-logging = true
log-4xx = true
log-5xx = true

processes = 4
max-requests = 5000                 # Restart workers after this many requests
max-worker-lifetime = 3600          # Restart workers after this many seconds
reload-on-rss = 2048                # Restart workers after this much resident memory
worker-reload-mercy = 60            # How long to wait before forcefully killing workers

thunder-lock = true

# not strictly required
#cheaper-algo = busyness              
#processes = 500                      # Maximum number of workers allowed
#cheaper = 8                          # Minimum number of workers allowed
#cheaper-initial = 16                 # Workers created at startup
#cheaper-overload = 1                 # Length of a cycle in seconds
#cheaper-step = 16                    # How many workers to spawn at a time

#cheaper-busyness-multiplier = 30     # How many cycles to wait before killing workers
#cheaper-busyness-min = 20            # Below this threshold, kill workers (if stable for multiplier cycles)
#cheaper-busyness-max = 70            # Above this threshold, spawn new workers
#cheaper-busyness-backlog-alert = 16  # Spawn emergency workers if more than this many requests are waiting in the queue
#cheaper-busyness-backlog-step = 2    # How many emergegency workers to create if there are too many requests in the queue

harakiri = 60                        # Forcefully kill workers after 60 seconds
py-call-osafterfork = true

auto-procname = true
procname-prefix = "mysvc "  # note the space